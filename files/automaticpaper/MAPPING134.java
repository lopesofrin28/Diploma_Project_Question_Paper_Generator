package automaticpaper;

import com.itextpdf.text.BadElementException;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Font;
import com.itextpdf.text.Image;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Color;
import java.awt.Component;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.MalformedURLException;
import java.security.Security;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
//import JavaApplication1.Secure_file.manipulatePdf
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Random;
import java.util.StringTokenizer;
import java.util.concurrent.ThreadLocalRandom;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.apache.pdfbox.exceptions.COSVisitorException;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.edit.PDPageContentStream;
import org.apache.pdfbox.pdmodel.font.PDFont;
import javax.swing.UIManager;
//import org.bouncycastle.jce.provider.BouncyCastleProvider;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
    /**
 *
 * @author Omkar
 */
public class MAPPING134 extends javax.swing.JFrame {
     int totalque=0;
    private PDFont fontPlain;
      private void shuffleArray(String[] ar) {
         Random rnd = ThreadLocalRandom.current();
    for (int i =5; i >=0; i--)
    {
      int index = rnd.nextInt(i+1);
      // Simple swap
      String a = ar[index];
      ar[index] = ar[i];
      ar[i] = a;
    }
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    

    Connection con = null;
    PreparedStatement pst = null;
    ResultSet rs = null;
    Statement stmt = null;
    private Object subject;

    /**
     * Creates new form MAPPING1
     */
    public MAPPING134() {
        initComponents();
        Random gen = new Random();

        Color color = new Color(gen.nextInt(240), gen.nextInt(240),
                gen.nextInt(240));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    void mapping44(String sub,String mod) throws DocumentException, FileNotFoundException, BadElementException, MalformedURLException, IOException {
        // TODO add your handling code here: 
        // String hrs="select HOURS from ai12 where MODULE=1";
         int n;
        // TODO add your handling code here:
        try {
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/csv_db", "root", "");
            stmt = con.createStatement();
            String[] strArr1 = null;
            String[] strArr2 = null;
            String[] strArr3 = null;
            String[] modArr =null;
            
            final String str = "Explain ,Describe ,Write short note on ,What is ,";
            String[] typeQuestion = null;
            String[] que =new String[40];
            String[] queprnt =new String[10];
            
            //String[] args =new String[totalque];
            String array1 = "";
            String match1="";
            int flag1 = 0;
            //int flag2 = 0;
            //int flag3 = 0;
            int[] no_que=new int[20] ;
            int count1 = 0;
            int any=0;
            int a=0;
            int i=0;
            boolean signal=false;
            int anything=0;        
          // String outputFileName =null;
          // outputFileName = "Simple1.pdf";
        //if (args.length > 0)
          //  outputFileName = args[0];
           // Composer1 c=new Composer1();
            //Finding no of modules
      if (str.contains(",")) {
            typeQuestion = str.split(",");
        }
        if ( typeQuestion == null || typeQuestion.length == 0) {
            System.out.println("***Null array found");
            return;
        }
        
       

           
           
          
           /////////////////
            try {
               
                modArr = mod.split(",");
               
   /*            
                 //Finding no of questions
            for(int j=0;j<any;j++)
            {
           // String nquestion = "select QUESTIONS from weightage where HOURS IN(select HOURS from ai1 where MODULE IN(SELECT MODULE FROM ai1 ))";
           String nquestion = "select QUESTIONS from weightage where HOURS =(select HOURS from "+ sub+" where MODULE='"+(j+1)+"')";
             PreparedStatement ps2=con.prepareStatement(nquestion);    
            ResultSet rs2 = ps2.executeQuery();
            while (rs2.next()) {
                String noquestion = rs2.getString("QUESTIONS");
                System.out.println("Total questions:" + noquestion);
                no_que[j] = Integer.parseInt(noquestion);
                //totalque = totalque + no_que[j];
           }
            
           } */
               int m1=Integer.parseInt(modArr[0]);
               int m2=Integer.parseInt(modArr[1]);
               int m3=Integer.parseInt(modArr[2]);
               System.out.println(modArr[0]);
               System.out.println(modArr[1]);
               System.out.println(modArr[2]);
               
                   
               String sql = "SELECT SUBTOPIC FROM "+sub+"";
              PreparedStatement ps4=con.prepareStatement(sql);
              ResultSet rs4 = ps4.executeQuery();
              
              while(rs4.next())
               {
                   
                String subtopic1 = rs4.getString("SUBTOPIC");
                //String subtopic2 = rs4.getString("SUBTOPIC");
               // String subtopic3 = rs4.getString("SUBTOPIC");
                array1 = array1 + subtopic1;
              //  array2 = array2 + subtopic2;
               // array3 = array3 + subtopic3;
               flag1++;

                if (subtopic1.isEmpty() && flag1 != 1) {
                
                if (array1.contains(",")) {
                    strArr1 = array1.split(",");
                }

                if (strArr1 == null || strArr1.length == 0) {
                    System.out.println("*Null array found");
                    return;
                }
             
                que[a] =strArr1[new Random().nextInt(strArr1.length)];
                
                 for(int count=0;count < 1;count++) {
                match1=strArr1[new Random().nextInt(strArr1.length)];
                if(match1.equals(que[a]))
                {
                    count--;
                }
                else
                {  
                    que[a+1] =match1; 
                    a=a+2;
                }
                }
                array1="";
                
                }
               
                //for last module
                if(subtopic1.contains("//")) 
               {
                
                if (array1.contains(",")) {
                    strArr1 = array1.split(",");
                }

                if (strArr1 == null || strArr1.length == 0) {
                    System.out.println("*Null array found");
                    return;
                }
             
                que[a] =strArr1[new Random().nextInt(strArr1.length)];
                
                 for(int count=0;count < 1;count++) {
                match1=strArr1[new Random().nextInt(strArr1.length)];
                if(match1.equals(que[a]))
                { count--;
                }
                else
                { 
                    que[a+1] =match1; 
                    a=a+2;
                }
                }
                array1="";
                
               }
                
                
            }
             
             
              
              
             
              System.out.println("///////////////////////");
              System.out.println(que[0]);
              System.out.println(que[1]);
              System.out.println(que[2]);
              System.out.println(que[3]);
              System.out.println(que[4]);
              System.out.println(que[5]);
              System.out.println(que[6]);
              System.out.println(que[7]);
              System.out.println(que[8]);
              System.out.println(que[9]);
              System.out.println(que[10]);
              System.out.println(que[11]);
              System.out.println("///////////////////////");
              
              
              if(m1==1 || m2==1 || m3==1){
              System.out.println(que[0]);
              System.out.println(que[1]);
              queprnt[i]=que[0];
              queprnt[i+1]=que[1];
              i=i+2;
              }
              if(m1==2 || m2==2 || m3==2){
              System.out.println(que[2]);
              System.out.println(que[3]);
              queprnt[i]=que[2];
              queprnt[i+1]=que[3];
              i=i+2;
              }
              if(m1==3 || m2==3 || m3==3){
              System.out.println(que[4]);
              System.out.println(que[5]);
              queprnt[i]=que[4];
              queprnt[i+1]=que[5];
              i=i+2;
              }
              if(m1==4 || m2==4 || m3==4){
              System.out.println(que[6]);
              System.out.println(que[7]);
              queprnt[i]=que[6];
              queprnt[i+1]=que[7];
              i=i+2;
              }
              if(m1==5 || m2==5 || m3==5){
              System.out.println(que[8]);
              System.out.println(que[9]);
              queprnt[i]=que[8];
              queprnt[i+1]=que[9];
              i=i+2;
              }
              if(m1==6 || m2==6 || m3==6){
              System.out.println(que[10]);
              System.out.println(que[11]);
              queprnt[i]=que[10];
              queprnt[i+1]=que[11];
              i=i+2;
              }
              
              
              
            
            
        } catch (SQLException ex) {
            Logger.getLogger(composerut.class.getName()).log(Level.SEVERE, null, ex);
        }

        shuffleArray(queprnt);
            ////////////////
           
            
          
          
              Document document = new Document();
              PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream("E://"+sub+".pdf"));
             
          
              // String USER_PASS = "Hello123";
              //String OWNER_PASS = "Owner123";
              
              //writer.setEncryption(USER_PASS.getBytes(), OWNER_PASS.getBytes(),
               //    PdfWriter.ALLOW_PRINTING, PdfWriter.ENCRYPTION_AES_128);
               //Security.addProvider(new BouncyCastleProvider());
              // writer.setEncryption("krishna".getBytes(), "testpass".getBytes(),

                   //     PdfWriter.ALLOW_COPY, PdfWriter.ENCRYPTION_AES_128);
String SALTCHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";
        StringBuilder salt = new StringBuilder();
        Random rnd = new Random();
        while (salt.length() < 4) {
            int index = (int) (rnd.nextFloat() * SALTCHARS.length());
            salt.append(SALTCHARS.charAt(index));
        }
        String saltStr = salt.toString(); 
                document.open();
                Font boldFont = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);
                         Font boldFont1 = new Font(Font.FontFamily.TIMES_ROMAN, 12);
                          Font boldFont2 = new Font(Font.FontFamily.TIMES_ROMAN, 20);
                 document.add(new Paragraph("VIVA INSTITUTE OF TECHNOLOGY",boldFont2));
             Image image1 = Image.getInstance("E:\\download.png");
             image1.setAlignment(Image.LEFT| Image.TEXTWRAP);    
             // image1.setAbsolutePosition(100f,700f);
                  image1.scaleAbsolute(100,100);
                 // document.add(image1);
                       document.add(image1);
                
                       document.add( Chunk.NEWLINE );
                 document.add(new Paragraph("                                                                             "));
                 document.add(new Paragraph("                                                                             "));
                 document.add(new Paragraph("                                                                             "));
                 document.add(new Paragraph("                                                                             "));
                 document.add(new Paragraph("                                                                             "));
                 document.add(new Paragraph("                                                                             "));
             
             System.out.println("********");
              for (int j = 1; j <5  ; j++)
    {
              System.out.println(queprnt[j]);
    }
               System.out.println("********");
        
              
   int c=97;//used to show subquestions a and b
    document.add( Chunk.NEWLINE );
     composerut c3 = new composerut();
    // MAPPING1 M=new MAPPING1();
   String Branch=String.valueOf(c3.branch.getSelectedItem());  
    //document.add(new Paragraph("Subject: "+sub+""));
     document.add(new Paragraph("Branch: "+Branch+"",boldFont));
    document.add(new Paragraph("Subject: "+sub+"",boldFont));
    document.add(new Paragraph("CODE: "+saltStr+"",boldFont));
    document.add(new Paragraph("                                                                             "));
    
    document.add(new Paragraph("Rules:",boldFont));
    document.add(new Paragraph("1) Question no.1 is compulsory."));
    document.add(new Paragraph("2) Solve any one  out of remaining 3 questions."));
    document.add(new Paragraph("3) Marks assigned to each question is given at right side."));
    
    document.add(new Paragraph("                                                                             "));
  //  document.add(new Paragraph("                                                                             "));
    document.add(new Paragraph("____________________________________________________________________________ "));
            
   
   //PdfContentByte cb = writer.getDirectContent();
   //cb.beginText();
   //cb.setTextMatrix(100,300);
    document.add( Chunk.NEWLINE );
             for (int j = 1; j <5  ; j++)
    {
        //document.add( Chunk.NEWLINE );
       // if(i==totalque-1)
        //{
             //System.out.println(i);        
          //  break;
                   
       // }     
        document.add(new Paragraph("Q."+(j)+"."+typeQuestion[+new Random().nextInt(typeQuestion.length)]+queprnt[j]+" [10]"));
        System.out.println("Q"+(j)+typeQuestion[+new Random().nextInt(typeQuestion.length)]+queprnt[j]+" [10]");
        
         
       
       document.add( Chunk.NEWLINE );
        System.out.println();
        
      //cos.endText();
    
    }
             //cb.endText();
        document.add(new Paragraph("---------------------------------------------------//ALL THE BEST//-------------------------------------------------------"));
    document.close();
   writer.close();
     /*cos.close();
          document.save(outputFileName);
        document.close();*/
   
   //Secure_file s=new Secure_file();
           
          //s.main(null);
        Secure_file s = new Secure_file();//call for encyption and watermark
        s.anu(sub);

            
         }catch (SQLException ex) {
            Logger.getLogger(MAPPING134.class.getName()).log(Level.SEVERE, null, ex);
        } 
    }

   

/**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
           /* for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }*/
            UIManager.setLookAndFeel("com.jtattoo.plaf.acryl.AcrylLookAndFeel");
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MAPPING134.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MAPPING134.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MAPPING134.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MAPPING134.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new MAPPING134().setVisible(true);
            }
        });
   
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

   
}

